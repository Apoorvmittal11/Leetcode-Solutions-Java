https://leetcode.com/problems/binary-tree-right-side-view/description/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   // List<Integer> ans=new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        // if(root==null){
        //     return ans;
        // }
        // ans.add(root.val);
        // return rightSideView(root.right);
        List<Integer> rightSideNodes = new ArrayList<>();
        if (root == null) {
            return rightSideNodes;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            Integer rightmostValue = null;
            for (int i = 0; i < levelSize; i++) {
                TreeNode currentNode = queue.poll();
                rightmostValue = currentNode.val;
                if (currentNode.left != null) {
                    queue.add(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.add(currentNode.right);
                }
            }
            rightSideNodes.add(rightmostValue);
        }
        return rightSideNodes;
    }
}
