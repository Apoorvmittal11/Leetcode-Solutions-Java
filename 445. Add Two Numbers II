/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        long num1 = listToNumber(l1);
        long num2 = listToNumber(l2);
        long sum = num1 + num2;
        return numberToList(sum);
    }

    private long listToNumber(ListNode node) {
        long number = 0;
        while (node != null) {
            number = number * 10 + node.val;
            node = node.next;
        }
        return number;
    }

    private ListNode numberToList(long num) {
        if (num == 0) {
            return new ListNode(0);
        }
        ListNode head = null;
        ListNode current = null;
        while (num > 0) {
            int digit = (int) (num % 10);
            ListNode newNode = new ListNode(digit);
            if (head == null) {
                head = newNode;
                current = newNode;
            } else {
                newNode.next = head;
                head = newNode;
            }
            num /= 10;
        }
        return head;
    }
}
