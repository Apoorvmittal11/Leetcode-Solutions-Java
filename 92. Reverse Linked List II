/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode head1 = head;
        int c = 0;
        while (head1 != null) {
            c++;
            head1 = head1.next;
        }
        int arr[] = new int[c];
        ListNode temp = head;
        for (int i = 0; i < c; i++) {
            arr[i] = temp.val;
            temp = temp.next;
        }
        int j = right - 1;
        for (int i = left - 1; i < (left + right) / 2; i++) {
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
            j--;
        }
        ListNode newhead = new ListNode(arr[0]);
        ListNode temp1 = newhead;
        for (int b = 1; b < c; b++) {
            ListNode newnode = new ListNode(arr[b]);
            temp1.next = newnode;
            temp1 = newnode;
        }
        temp1.next = null;
        return newhead;
    }
}
